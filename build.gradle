// Execute Tasks in SubModule: gradle MODUL:clean build
plugins {
    id "de.freese.gradle.conventions" version "$version_myConventionPlugin" apply false
    id "io.spring.dependency-management" version "$version_springDependencyManagement" apply false
}

subprojects {
    apply plugin: "base"
    apply plugin: "de.freese.gradle.conventions"
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:$version_springBoot")
        }

        dependencies {
            dependency("commons-cli:commons-cli:$version_commonsCli")
        }
    }

//    afterEvaluate { project ->
//        if (project.plugins.hasPlugin("java") || project.plugins.hasPlugin("java-library") || project.plugins.hasPlugin("application")) {
//            dependencies {
//                testImplementation("org.junit.jupiter:junit-jupiter")
//                testRuntimeOnly("org.junit.platform:junit-platform-launcher")
//            }
//        }
//    }
}

project("jsync2-core") {
    apply plugin: "java-library"
    description = "A Java rsync clone: Core Module"
    dependencies {
        api("org.slf4j:slf4j-api")
    }
}

project("jsync2-console") {
    apply plugin: "java"
    description = "A Java rsync clone: Console Module"
    dependencies {
        implementation(project(":jsync2-core"))

        implementation("commons-cli:commons-cli")

        runtimeOnly("org.slf4j:slf4j-nop")
    }
}

project("jsync2-swing") {
    apply plugin: "java"
    description = "A Java rsync clone: Swing-GUI"
    dependencies {
        implementation(project(":jsync2-core"))

        runtimeOnly("org.slf4j:slf4j-simple")
    }
}

project("jsync2-test") {
    apply plugin: "java"
    description = "A Java rsync clone: Test Module"
    dependencies {
        testImplementation(project(":jsync2-core"))

        testImplementation("org.junit.jupiter:junit-jupiter")

        testRuntimeOnly("org.junit.platform:junit-platform-launcher")
        testRuntimeOnly("org.slf4j:slf4j-simple")
    }
//    test {
//        maxParallelForks = 1 // Will not do parallel execution
//    }
}
